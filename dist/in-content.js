/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/in-content.js":
/*!******************************!*\
  !*** ./src/js/in-content.js ***!
  \******************************/
/***/ (() => {

eval("let tablesLoaded = false;\nlet extraCols = [{\n  \"name\": \"# Rounds\",\n  \"className\": \"number-of-rounds\"\n}, {\n  \"name\": \"Avg Rating\",\n  \"className\": \"average-round-rating\"\n}];\ndocument.addEventListener('readystatechange', event => {\n  // Prevents infinite loops when new data is loaded\n  if (tablesLoaded) return;\n  let tables = document.getElementsByClassName(\"tablesorter\"); // Waits until the table is populated\n\n  if (tables.length === 0) return;\n\n  for (let i = 0; i < tables.length; i++) {\n    let table = tables[i];\n    console.log(table);\n    let thead = table.getElementsByTagName(\"thead\");\n    let tbody = table.getElementsByTagName(\"tbody\");\n    let headerRows = thead[0].getElementsByTagName(\"tr\");\n    let bodyRows = tbody[0].getElementsByTagName(\"tr\");\n    addExtraCols(headerRows[0], bodyRows);\n    fetchData(bodyRows);\n  }\n\n  ; // Finally updates tablesLoaded to make sure the function is only run once\n\n  tablesLoaded = true;\n}); // Adds each of the extra columns\n// Populates the header cell, adds a dummy \"loading\" message to each body cell\n\nfunction addExtraCols(headerRow, bodyRows) {\n  for (let j = 0; j < extraCols.length; j++) {\n    // First updates the column header\n    let columnHeader = document.createElement(\"TH\");\n    let columnHeaderDiv = document.createElement(\"DIV\");\n    columnHeaderDiv.innerHTML = extraCols[j].name;\n    columnHeaderDiv.className = \"tablesorter-header-inner\";\n    columnHeader.appendChild(columnHeaderDiv);\n    headerRow.appendChild(columnHeader); // Then adds the \"loading\" message to each of the rows\n\n    for (let k = 0; k < bodyRows.length; k++) {\n      let row = bodyRows[k];\n      let newCell = row.insertCell(-1);\n      newCell.innerHTML = \"<i>Loading...</i>\";\n      newCell.className = extraCols[j].className;\n    }\n\n    ;\n  }\n} // Loops over each row in a table, starting the content fetching process\n\n\nfunction fetchData(bodyRows) {\n  for (let i = 0; i < bodyRows.length; i++) {\n    let row = bodyRows[i];\n    let tournamentCell = row.getElementsByClassName(\"tournament\")[0];\n    let tournamentLink = tournamentCell.getElementsByTagName(\"a\")[0];\n    console.log(tournamentLink.href);\n    $.get(tournamentLink, response => console.log(response));\n  }\n} // Takes the relevant data found in fetchData,\n// updates the newly added columns in this specific row\n\n\nfunction updateData(row, data) {// TODO: fill this in\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZGdhLXN0YXRzLWNocm9tZS1leHRlbnNpb24vLi9zcmMvanMvaW4tY29udGVudC5qcz8wZDJmIl0sIm5hbWVzIjpbInRhYmxlc0xvYWRlZCIsImV4dHJhQ29scyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFibGVzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImxlbmd0aCIsImkiLCJ0YWJsZSIsImNvbnNvbGUiLCJsb2ciLCJ0aGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGJvZHkiLCJoZWFkZXJSb3dzIiwiYm9keVJvd3MiLCJhZGRFeHRyYUNvbHMiLCJmZXRjaERhdGEiLCJoZWFkZXJSb3ciLCJqIiwiY29sdW1uSGVhZGVyIiwiY3JlYXRlRWxlbWVudCIsImNvbHVtbkhlYWRlckRpdiIsImlubmVySFRNTCIsIm5hbWUiLCJjbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsImsiLCJyb3ciLCJuZXdDZWxsIiwiaW5zZXJ0Q2VsbCIsInRvdXJuYW1lbnRDZWxsIiwidG91cm5hbWVudExpbmsiLCJocmVmIiwiJCIsImdldCIsInJlc3BvbnNlIiwidXBkYXRlRGF0YSIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVksR0FBRyxLQUFuQjtBQUNBLElBQUlDLFNBQVMsR0FBRyxDQUNaO0FBQ0ksVUFBUyxVQURiO0FBRUksZUFBYztBQUZsQixDQURZLEVBS1o7QUFDSSxVQUFTLFlBRGI7QUFFSSxlQUFjO0FBRmxCLENBTFksQ0FBaEI7QUFXQUMsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBK0NDLEtBQUQsSUFBVztBQUNyRDtBQUNBLE1BQUlKLFlBQUosRUFBa0I7QUFFbEIsTUFBSUssTUFBTSxHQUFHSCxRQUFRLENBQUNJLHNCQUFULENBQWdDLGFBQWhDLENBQWIsQ0FKcUQsQ0FLckQ7O0FBQ0EsTUFBSUQsTUFBTSxDQUFDRSxNQUFQLEtBQWtCLENBQXRCLEVBQXlCOztBQUV6QixPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILE1BQU0sQ0FBQ0UsTUFBM0IsRUFBbUNDLENBQUMsRUFBcEMsRUFBd0M7QUFDcEMsUUFBSUMsS0FBSyxHQUFHSixNQUFNLENBQUNHLENBQUQsQ0FBbEI7QUFDQUUsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLEtBQVo7QUFFQSxRQUFJRyxLQUFLLEdBQUdILEtBQUssQ0FBQ0ksb0JBQU4sQ0FBMkIsT0FBM0IsQ0FBWjtBQUNBLFFBQUlDLEtBQUssR0FBR0wsS0FBSyxDQUFDSSxvQkFBTixDQUEyQixPQUEzQixDQUFaO0FBRUEsUUFBSUUsVUFBVSxHQUFHSCxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNDLG9CQUFULENBQThCLElBQTlCLENBQWpCO0FBQ0EsUUFBSUcsUUFBUSxHQUFHRixLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNELG9CQUFULENBQThCLElBQTlCLENBQWY7QUFFQUksSUFBQUEsWUFBWSxDQUFDRixVQUFVLENBQUMsQ0FBRCxDQUFYLEVBQWdCQyxRQUFoQixDQUFaO0FBQ0FFLElBQUFBLFNBQVMsQ0FBQ0YsUUFBRCxDQUFUO0FBQ0g7O0FBQUEsR0FwQm9ELENBc0JyRDs7QUFDQWhCLEVBQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0gsQ0F4QkQsRSxDQTBCQTtBQUNBOztBQUNBLFNBQVNpQixZQUFULENBQXNCRSxTQUF0QixFQUFpQ0gsUUFBakMsRUFBMkM7QUFDdkMsT0FBSyxJQUFJSSxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNuQixTQUFTLENBQUNNLE1BQTFCLEVBQWtDYSxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DO0FBQ0EsUUFBSUMsWUFBWSxHQUFHbkIsUUFBUSxDQUFDb0IsYUFBVCxDQUF1QixJQUF2QixDQUFuQjtBQUNBLFFBQUlDLGVBQWUsR0FBR3JCLFFBQVEsQ0FBQ29CLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBdEI7QUFDQUMsSUFBQUEsZUFBZSxDQUFDQyxTQUFoQixHQUE0QnZCLFNBQVMsQ0FBQ21CLENBQUQsQ0FBVCxDQUFhSyxJQUF6QztBQUNBRixJQUFBQSxlQUFlLENBQUNHLFNBQWhCLEdBQTRCLDBCQUE1QjtBQUNBTCxJQUFBQSxZQUFZLENBQUNNLFdBQWIsQ0FBeUJKLGVBQXpCO0FBQ0FKLElBQUFBLFNBQVMsQ0FBQ1EsV0FBVixDQUFzQk4sWUFBdEIsRUFQbUMsQ0FTbkM7O0FBQ0EsU0FBSyxJQUFJTyxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNaLFFBQVEsQ0FBQ1QsTUFBekIsRUFBaUNxQixDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFVBQUlDLEdBQUcsR0FBR2IsUUFBUSxDQUFDWSxDQUFELENBQWxCO0FBQ0EsVUFBSUUsT0FBTyxHQUFHRCxHQUFHLENBQUNFLFVBQUosQ0FBZSxDQUFDLENBQWhCLENBQWQ7QUFDQUQsTUFBQUEsT0FBTyxDQUFDTixTQUFSLEdBQW9CLG1CQUFwQjtBQUNBTSxNQUFBQSxPQUFPLENBQUNKLFNBQVIsR0FBb0J6QixTQUFTLENBQUNtQixDQUFELENBQVQsQ0FBYU0sU0FBakM7QUFDSDs7QUFBQTtBQUNKO0FBQ0osQyxDQUVEOzs7QUFDQSxTQUFTUixTQUFULENBQW1CRixRQUFuQixFQUE2QjtBQUN6QixPQUFLLElBQUlSLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ1EsUUFBUSxDQUFDVCxNQUF6QixFQUFpQ0MsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQyxRQUFJcUIsR0FBRyxHQUFHYixRQUFRLENBQUNSLENBQUQsQ0FBbEI7QUFDQSxRQUFJd0IsY0FBYyxHQUFHSCxHQUFHLENBQUN2QixzQkFBSixDQUEyQixZQUEzQixFQUF5QyxDQUF6QyxDQUFyQjtBQUNBLFFBQUkyQixjQUFjLEdBQUdELGNBQWMsQ0FBQ25CLG9CQUFmLENBQW9DLEdBQXBDLEVBQXlDLENBQXpDLENBQXJCO0FBQ0FILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZc0IsY0FBYyxDQUFDQyxJQUEzQjtBQUNBQyxJQUFBQSxDQUFDLENBQUNDLEdBQUYsQ0FBTUgsY0FBTixFQUF1QkksUUFBRCxJQUFZM0IsT0FBTyxDQUFDQyxHQUFSLENBQVkwQixRQUFaLENBQWxDO0FBQ0g7QUFDSixDLENBRUQ7QUFDQTs7O0FBQ0EsU0FBU0MsVUFBVCxDQUFvQlQsR0FBcEIsRUFBeUJVLElBQXpCLEVBQStCLENBQzNCO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdGFibGVzTG9hZGVkID0gZmFsc2U7XG5sZXQgZXh0cmFDb2xzID0gW1xuICAgIHtcbiAgICAgICAgXCJuYW1lXCIgOiBcIiMgUm91bmRzXCIsXG4gICAgICAgIFwiY2xhc3NOYW1lXCIgOiBcIm51bWJlci1vZi1yb3VuZHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm5hbWVcIiA6IFwiQXZnIFJhdGluZ1wiLFxuICAgICAgICBcImNsYXNzTmFtZVwiIDogXCJhdmVyYWdlLXJvdW5kLXJhdGluZ1wiXG4gICAgfSxcbl07XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAvLyBQcmV2ZW50cyBpbmZpbml0ZSBsb29wcyB3aGVuIG5ldyBkYXRhIGlzIGxvYWRlZFxuICAgIGlmICh0YWJsZXNMb2FkZWQpIHJldHVybjtcblxuICAgIGxldCB0YWJsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFibGVzb3J0ZXJcIik7XG4gICAgLy8gV2FpdHMgdW50aWwgdGhlIHRhYmxlIGlzIHBvcHVsYXRlZFxuICAgIGlmICh0YWJsZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGFibGUgPSB0YWJsZXNbaV07XG4gICAgICAgIGNvbnNvbGUubG9nKHRhYmxlKTtcblxuICAgICAgICBsZXQgdGhlYWQgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRoZWFkXCIpO1xuICAgICAgICBsZXQgdGJvZHkgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpO1xuXG4gICAgICAgIGxldCBoZWFkZXJSb3dzID0gdGhlYWRbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0clwiKTtcbiAgICAgICAgbGV0IGJvZHlSb3dzID0gdGJvZHlbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0clwiKTtcblxuICAgICAgICBhZGRFeHRyYUNvbHMoaGVhZGVyUm93c1swXSwgYm9keVJvd3MpO1xuICAgICAgICBmZXRjaERhdGEoYm9keVJvd3MpO1xuICAgIH07XG5cbiAgICAvLyBGaW5hbGx5IHVwZGF0ZXMgdGFibGVzTG9hZGVkIHRvIG1ha2Ugc3VyZSB0aGUgZnVuY3Rpb24gaXMgb25seSBydW4gb25jZVxuICAgIHRhYmxlc0xvYWRlZCA9IHRydWU7XG59KTtcblxuLy8gQWRkcyBlYWNoIG9mIHRoZSBleHRyYSBjb2x1bW5zXG4vLyBQb3B1bGF0ZXMgdGhlIGhlYWRlciBjZWxsLCBhZGRzIGEgZHVtbXkgXCJsb2FkaW5nXCIgbWVzc2FnZSB0byBlYWNoIGJvZHkgY2VsbFxuZnVuY3Rpb24gYWRkRXh0cmFDb2xzKGhlYWRlclJvdywgYm9keVJvd3MpIHtcbiAgICBmb3IgKGxldCBqPTA7IGo8ZXh0cmFDb2xzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIC8vIEZpcnN0IHVwZGF0ZXMgdGhlIGNvbHVtbiBoZWFkZXJcbiAgICAgICAgbGV0IGNvbHVtbkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJUSFwiKTtcbiAgICAgICAgbGV0IGNvbHVtbkhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XG4gICAgICAgIGNvbHVtbkhlYWRlckRpdi5pbm5lckhUTUwgPSBleHRyYUNvbHNbal0ubmFtZTtcbiAgICAgICAgY29sdW1uSGVhZGVyRGl2LmNsYXNzTmFtZSA9IFwidGFibGVzb3J0ZXItaGVhZGVyLWlubmVyXCI7XG4gICAgICAgIGNvbHVtbkhlYWRlci5hcHBlbmRDaGlsZChjb2x1bW5IZWFkZXJEaXYpO1xuICAgICAgICBoZWFkZXJSb3cuYXBwZW5kQ2hpbGQoY29sdW1uSGVhZGVyKTtcblxuICAgICAgICAvLyBUaGVuIGFkZHMgdGhlIFwibG9hZGluZ1wiIG1lc3NhZ2UgdG8gZWFjaCBvZiB0aGUgcm93c1xuICAgICAgICBmb3IgKGxldCBrPTA7IGs8Ym9keVJvd3MubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSBib2R5Um93c1trXTtcbiAgICAgICAgICAgIGxldCBuZXdDZWxsID0gcm93Lmluc2VydENlbGwoLTEpO1xuICAgICAgICAgICAgbmV3Q2VsbC5pbm5lckhUTUwgPSBcIjxpPkxvYWRpbmcuLi48L2k+XCJcbiAgICAgICAgICAgIG5ld0NlbGwuY2xhc3NOYW1lID0gZXh0cmFDb2xzW2pdLmNsYXNzTmFtZTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8vIExvb3BzIG92ZXIgZWFjaCByb3cgaW4gYSB0YWJsZSwgc3RhcnRpbmcgdGhlIGNvbnRlbnQgZmV0Y2hpbmcgcHJvY2Vzc1xuZnVuY3Rpb24gZmV0Y2hEYXRhKGJvZHlSb3dzKSB7XG4gICAgZm9yIChsZXQgaT0wOyBpPGJvZHlSb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCByb3cgPSBib2R5Um93c1tpXTtcbiAgICAgICAgbGV0IHRvdXJuYW1lbnRDZWxsID0gcm93LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0b3VybmFtZW50XCIpWzBdO1xuICAgICAgICBsZXQgdG91cm5hbWVudExpbmsgPSB0b3VybmFtZW50Q2VsbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbMF07XG4gICAgICAgIGNvbnNvbGUubG9nKHRvdXJuYW1lbnRMaW5rLmhyZWYpO1xuICAgICAgICAkLmdldCh0b3VybmFtZW50TGluaywgKHJlc3BvbnNlKT0+Y29uc29sZS5sb2cocmVzcG9uc2UpKTtcbiAgICB9XG59XG5cbi8vIFRha2VzIHRoZSByZWxldmFudCBkYXRhIGZvdW5kIGluIGZldGNoRGF0YSxcbi8vIHVwZGF0ZXMgdGhlIG5ld2x5IGFkZGVkIGNvbHVtbnMgaW4gdGhpcyBzcGVjaWZpYyByb3dcbmZ1bmN0aW9uIHVwZGF0ZURhdGEocm93LCBkYXRhKSB7XG4gICAgLy8gVE9ETzogZmlsbCB0aGlzIGluXG59XG4iXSwiZmlsZSI6Ii4vc3JjL2pzL2luLWNvbnRlbnQuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/in-content.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/in-content.js"]();
/******/ 	
/******/ })()
;