/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/in-content.js":
/*!******************************!*\
  !*** ./src/js/in-content.js ***!
  \******************************/
/***/ (() => {

eval("let currUrl = location.href;\nlet numRe = /.*\\/player\\/(\\d+)(?:\\/|$).*/;\nlet match = currUrl.match(numRe); // TODO: figure out if this is a stable way to find the PDGA number\n\nconst pdgaNumber = match[1];\nlet tablesLoaded = false;\nlet extraCols = [{\n  \"name\": \"# Rounds\",\n  \"className\": \"number-of-rounds\"\n}, {\n  \"name\": \"Avg Rating\",\n  \"className\": \"average-round-rating\"\n}];\ndocument.addEventListener('readystatechange', event => {\n  // Prevents infinite loops when new data is loaded\n  if (tablesLoaded) return;\n  let tables = document.getElementsByClassName(\"tablesorter\"); // Waits until the table is populated\n\n  if (tables.length === 0) return;\n\n  for (let i = 0; i < tables.length; i++) {\n    let table = tables[i];\n    let thead = table.getElementsByTagName(\"thead\");\n    let tbody = table.getElementsByTagName(\"tbody\");\n    let headerRows = thead[0].getElementsByTagName(\"tr\");\n    let bodyRows = tbody[0].getElementsByTagName(\"tr\");\n    addExtraCols(headerRows[0], bodyRows);\n    fetchData(bodyRows);\n  }\n\n  ; // Finally updates tablesLoaded to make sure the function is only run once\n\n  tablesLoaded = true;\n}); // Adds each of the extra columns\n// Populates the header cell, adds a dummy \"loading\" message to each body cell\n\nfunction addExtraCols(headerRow, bodyRows) {\n  for (let j = 0; j < extraCols.length; j++) {\n    // First updates the column header\n    let columnHeader = document.createElement(\"TH\");\n    let columnHeaderDiv = document.createElement(\"DIV\");\n    columnHeaderDiv.innerHTML = extraCols[j].name;\n    columnHeaderDiv.className = \"tablesorter-header-inner\";\n    columnHeader.appendChild(columnHeaderDiv);\n    headerRow.appendChild(columnHeader); // Then adds the \"loading\" message to each of the rows\n\n    for (let k = 0; k < bodyRows.length; k++) {\n      let row = bodyRows[k];\n      let newCell = row.insertCell(-1);\n      newCell.innerHTML = \"\";\n      newCell.className = extraCols[j].className;\n    }\n\n    ;\n  }\n} // Loops over each row in a table, starting the content fetching process\n\n\nfunction fetchData(bodyRows) {\n  for (let i = 0; i < bodyRows.length; i++) {\n    let row = bodyRows[i];\n    let tournamentCell = row.getElementsByClassName(\"tournament\")[0];\n    let tournamentLink = tournamentCell.getElementsByTagName(\"a\")[0]; // Fetches the web page for this tournament using jQuery\n\n    $.get(tournamentLink, page => {\n      $(\"table.results\", page).each((_, table) => {\n        let numRows = $(\"tr\", table).length - 1;\n        $(\"tr\", table).each((_, playerRow) => {\n          let num = $(\"td.pdga-number\", playerRow).text();\n\n          if (num === pdgaNumber) {\n            // This means that the current table is the correct division\n            // And the currect row corresponds to the correct player\n            let numRounds = $(\"td.round-rating\", playerRow).length;\n            let priorRating = $(\"td.player-rating\", playerRow).text();\n            let numProcessed = 0;\n            let ratings = [];\n            $(\"td.round-rating\", playerRow).each((_, cell) => {\n              let rating = $(cell).text();\n\n              if (rating) {\n                rating = parseInt(rating);\n                ratings.push(rating);\n              }\n\n              numProcessed += 1;\n\n              if (numProcessed === numRounds) {\n                updateData(row, {\n                  ratings: ratings,\n                  priorRating: priorRating\n                });\n              }\n            });\n          }\n        });\n      });\n    });\n  }\n} // Takes the relevant data found in fetchData,\n// updates the newly added columns in this specific row\n\n\nfunction updateData(row, data) {\n  const roundRatings = data.ratings;\n  const priorRating = data.priorRating;\n  const numRounds = roundRatings.length;\n  const ratingSum = roundRatings.reduce((a, b) => a + b, 0);\n  const ratingAvg = ratingSum / numRounds || 0;\n  let ratingChange = Math.round(ratingAvg) - priorRating;\n  let ratingAvgChild = document.createElement(\"SPAN\");\n  let ratingChangeChild = document.createElement(\"SPAN\");\n  let changeArrow = \"&#8593;\";\n  ratingChangeChild.className = \"rating-change rating-change-positive\";\n\n  if (ratingChange < 0) {\n    changeArrow = \"&#8595;\";\n    ratingChangeChild.className = \"rating-change rating-change-negative\";\n    ratingChange = -ratingChange;\n  } else if (ratingChange === 0) {\n    changeArrow = \"&#8594;\";\n    ratingChangeChild.className = \"rating-change rating-change-neutral\";\n  } // Average rating (hard coded for now)\n\n\n  let ratingAvgCell = row.getElementsByClassName(\"average-round-rating\")[0];\n  ratingAvgChild.innerHTML = Math.round(ratingAvg);\n  ratingChangeChild.innerHTML = changeArrow + \" \" + ratingChange;\n  ratingAvgCell.appendChild(ratingAvgChild);\n  ratingAvgCell.appendChild(ratingChangeChild); // Num of rounds (hard coded for now)\n\n  let numRoundsCell = row.getElementsByClassName(\"number-of-rounds\")[0];\n  numRoundsCell.innerHTML = numRounds;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/in-content.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/in-content.js"]();
/******/ 	
/******/ })()
;